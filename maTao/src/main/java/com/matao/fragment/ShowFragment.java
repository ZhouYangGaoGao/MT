package com.matao.fragment;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;import java.util.ArrayList;import java.util.List;import android.content.Intent;import android.graphics.drawable.AnimationDrawable;import android.graphics.drawable.BitmapDrawable;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup.LayoutParams;import android.widget.AbsListView;import android.widget.AbsListView.OnScrollListener;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.PopupWindow;import android.widget.PopupWindow.OnDismissListener;import android.widget.TextView;import com.alibaba.fastjson.JSON;import com.lidroid.xutils.ViewUtils;import com.lidroid.xutils.bitmap.PauseOnScrollListener;import com.lidroid.xutils.view.annotation.ViewInject;import com.lidroid.xutils.view.annotation.event.OnClick;import com.matao.activity.HomeActivity;import com.matao.activity.MyHouseActivity;import com.matao.activity.SearchActivity;import com.matao.adapter.CommonAdapter;import com.matao.adapter.HomeTypeAdapter;import com.matao.adapter.SeasGridAdapter;import com.matao.bean.ArticleList;import com.matao.bean.Bean;import com.matao.bean.DaTePager;import com.matao.bean.HeadAdList;import com.matao.matao.R;import com.matao.pulltorefresh.library.PullToRefreshBase;import com.matao.pulltorefresh.library.PullToRefreshListView;import com.matao.pulltorefresh.library.PullToRefreshBase.Mode;import com.matao.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;import com.matao.utils.Logger;import com.matao.utils.MTApplication;import com.matao.utils.MTUtils;import com.matao.utils.SendActtionTool;import com.matao.utils.ServiceAction;import com.matao.utils.URLs;import com.matao.utils.UserAction;import com.matao.utils.ViewHolder;import com.matao.view.MyGridView;import com.matao.view.NoSorceListView;import com.matao.view.TopBar;import com.matao.view.TopBar.topBarClickListener;import com.umeng.analytics.MobclickAgent;/** * @author: ZhouYang * @E-mail: ZhouYangGaoGao@163.com * @time:2015-4-29 下午4:49:57 * @Description:晒单列表 */public class ShowFragment extends BaseFragment implements OnDismissListener,		OnRefreshListener2<ListView>, OnScrollListener, topBarClickListener {	private TopBar topBar;	@ViewInject(R.id.favorable_tip)	TextView tip_doData;	@ViewInject(R.id.favorable_bg)	TextView bg;	@ViewInject(R.id.experience_menu)	LinearLayout caidan;	@ViewInject(R.id.anim)	private TextView aini;	private View foot;//	private TextView footer;	private PullToRefreshListView listView;	private NoSorceListView hdListView;	private List<ArticleList> list = new ArrayList<ArticleList>();	private List<HeadAdList> hdlist = new ArrayList<HeadAdList>();	private HomeTypeAdapter adapter;	private CommonAdapter<HeadAdList> headerAdapter;	private PopupWindow popupWindow;	private MyGridView g1, g2, g3;	private PopupWindow popupWindow2;// 筛选浮层	private TextView t1;	private TextView t2;	// private TextView aini;	private ImageView i1, dot;	private Bean bean;	private AnimationDrawable aniDraw;//	private int totalCount = 0;// 列表总条数//	private int pagerCount = 0;// 列表总页数	private String querytime = "2015-05-8";	private int type = 1;	private int channel = 3;	private int pageIndex = 1;	private int userid = 0;	public static int sortid = 0;	public static int ageid = 0;	public static int sourceid = 0;	@Override	public void onStart(ServiceAction service, Object action) {		super.onStart(service, action);	}	private boolean isCanLoad = true;	@Override	public void onFinish(ServiceAction service, Object action) {		super.onFinish(service, action);		listView.getRefreshableView().removeFooterView(foot);		isCanLoad = true;	}	@Override	public void onSuccess(ServiceAction service, Object action, Object value) {		super.onSuccess(service, action, value);		bean = JSON.parseObject(value.toString(), Bean.class);		if (bean != null) {			List<ArticleList> tlist = new ArrayList<ArticleList>();			switch ((UserAction) action) {			case Action_Experience_list:				tlist = bean.getData().getMataoJingYanLists();				Logger.i("Action_Experience_list", value.toString());				break;			}			if (tlist != null && tlist.size() != 0) {				Logger.i("成功--tlist", tlist.size());				list.addAll(tlist);				if (pageIndex == 1) {					hdlist = bean.getData().getRecommendsList();					initHdListview();				}				tip_doData.setVisibility(View.GONE);			} else if (list.size() == 0) {				tip_doData.setVisibility(View.VISIBLE);				hdListView.setVisibility(View.INVISIBLE);			}			DaTePager dp = bean.getData().getDaTePager();//			if (pageIndex == 1) {// 当列表为第一页的时候初始化下列属性//				totalCount = dp.getTotalCount();//				pagerCount = dp.getPageCount();//			}			// else if (tlist != null && tlist.size() != 0) {			// isMove = list.size() - tlist.size() + 1;			// }			// if (pagerCount != 0 && pageIndex >= pagerCount) {			// footer.setVisibility(View.VISIBLE);			// } else {			// footer.setVisibility(View.GONE);			// }			querytime = dp.getQueryTime();		}		animstop();	}	@Override	public void onException(ServiceAction service, Object action, Object value) {		super.onException(service, action, value);		animstop();		reset();		bg.setVisibility(View.VISIBLE);	}	@Override	public void onFaile(ServiceAction service, Object action, Object value) {		super.onFaile(service, action, value);		animstop();		reset();		bg.setVisibility(View.VISIBLE);	}	ListView lv;	private void initListView() {		lv = listView.getRefreshableView();		View header = LayoutInflater.from(getActivity()).inflate(				R.layout.experience_header, null);		hdListView = (NoSorceListView) header				.findViewById(R.id.experience_header_listview);		adapter = new HomeTypeAdapter(getActivity(), list);		lv.addHeaderView(header);		foot = View.inflate(getActivity(), R.layout.fragment_bottom, null);//		footer = (TextView) foot.findViewById(R.id.fragment_bottom_footer);		// footer.startAnimation(AnimationUtils.loadAnimation(getActivity(),		// R.anim.slide_bottom_to_top));		// lv.addFooterView(foot);		// lv.setOnScrollListener(this);		// lv.setOnTouchListener(this);		listView.setOnScrollListener(new PauseOnScrollListener(				MTApplication.bmu, false, true));		listView.setAdapter(adapter);	}	private void loadData() {		if (MTUtils.isNetworkConnected(getActivity())) {			if (isCanLoad) {				isCanLoad = false;				String url = null;				try {					String time = URLEncoder.encode(querytime, "utf-8");					url = MTUtils.getMTParams(URLs.SHOW_LIST, URLs.QUERY_TIME,							time, URLs.SORTID, sortid, URLs.AGEID, ageid,							URLs.CHANNEL, channel, "source", sourceid,							URLs.TYPE, type, URLs.PAGE_INDEX, pageIndex,							URLs.USER_ID, userid);					Logger.i("晒单-url", url);				} catch (UnsupportedEncodingException e) {					e.printStackTrace();				}				SendActtionTool.get(url, ServiceAction.Action_Comment,						UserAction.Action_Experience_list, this);			}		} else {			animstop();			reset();			tip_doData.setVisibility(View.GONE);			// footer.setVisibility(View.GONE);			listView.onRefreshComplete();			listView.setVisibility(View.INVISIBLE);			bg.setVisibility(View.VISIBLE);			MTUtils.netTip(getActivity());		}	}	private void initHdListview() {		hdListView.setVisibility(View.VISIBLE);		headerAdapter = new CommonAdapter<HeadAdList>(getActivity(), hdlist,				R.layout.item_experience_and_show_header) {			@Override			public void convert(ViewHolder h, final HeadAdList i, int p) {				h.setText(R.id.experience_header_text,						"          " + i.getTitle());			}		};		hdListView.setAdapter(headerAdapter);		hdListView.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,					long arg3) {				linkTo(hdlist.get(arg2));			}		});	}	/**	 * 广告跳转	 * 	 * 作者:ZhouYang	 * 	 * 2015-6-10上午11:12:32	 * 	 */	private void linkTo(HeadAdList h) {		HomeActivity home = (HomeActivity) getActivity();		home.linkTo(h);	}	@Override	public View setContentView(LayoutInflater inflater) {		return inflater.inflate(R.layout.fragment_experience_and_show, null);	}	@Override	public void initView(View v) {		ViewUtils.inject(this, v);		topBar = (TopBar) v.findViewById(R.id.experience_topbar);		topBar.setTitle("晒单");		topBar.setOnTopBarClickListener(this);		t1 = (TextView) v.findViewById(R.id.show_zuixin);		t2 = (TextView) v.findViewById(R.id.show_shaixuan);		listView = (PullToRefreshListView) v				.findViewById(R.id.experience_listview);		initListView();		dot = (ImageView) v.findViewById(R.id.show_shaixuan_dot);		aniDraw = (AnimationDrawable) aini.getBackground();		userid = MTApplication.getInt(URLs.USER_ID);		listView.setOnRefreshListener(this);		listView.setMode(Mode.BOTH);		v.findViewById(R.id.experience_filter).setOnClickListener(this);		v.findViewById(R.id.experience_new).setOnClickListener(this);		animaostart();		loadData();	}	TextView zuixin, gonglue;	@OnClick({ R.id.favorable_bg, R.id.favorable_top })	public void onClick(View v) {		switch (v.getId()) {		case R.id.favorable_top:			Logger.i("topClick", "返回顶部");			lv.setSelection(0);			break;		case R.id.favorable_bg:			animaostart();			loadData();			break;		case R.id.experience_new:			showPop();			i1.setVisibility(View.VISIBLE);			dismissPop(2);			break;		case R.id.experience_filter:			showShaiXuanPop();			dismissPop(1);			break;		case R.id.show_shaixuan_zuixinjingyan:			type = 1;			t1.setText("最新");			zuixin.setBackgroundResource(R.drawable.btn_7_press);			zuixin.setTextColor(0xffffffff);			gonglue.setBackgroundResource(R.drawable.btn_7);			gonglue.setTextColor(0xff999999);			reset();			animaostart();			loadData();			dismissPop(1);			break;		case R.id.show_shaixuan_gonglueji:			type = 2;			t1.setText("精选");			zuixin.setBackgroundResource(R.drawable.btn_7);			zuixin.setTextColor(0xff999999);			gonglue.setBackgroundResource(R.drawable.btn_7_press);			gonglue.setTextColor(0xffffffff);			reset();			animaostart();			loadData();			dismissPop(1);			break;		case R.id.show_shaixuan_N:			dismissPop(1);			break;		case R.id.show_shaixuan_clic_quyu:			dismissPop(1);			break;		case R.id.seas_screen_Y:			doYesSelect();			animaostart();			loadData();			dismissPop(2);			break;		case R.id.seas_screen_N:			t2.setText(MTApplication.fenlei[sortid]);			dismissPop(2);			break;		}	}	public static boolean isJump = true;	@Override	public void onResume() {		super.onResume();		Logger.i("show", "onResume");		Logger.i("show-isJump", isJump);		if (isJump) {			isJump = false;			doYesSelect();			t2.setText(MTApplication.fenlei[sortid]);			reset();			animaostart();			loadData(); // 加载数据的方法		}		MobclickAgent.onPageStart("MainScreen"); // 统计页面	}	public void onPause() {		super.onPause();		MobclickAgent.onPageEnd("MainScreen");	}	private void doYesSelect() {		if (sortid == 0 && ageid == 0 && sourceid == 0) {			dot.setVisibility(View.INVISIBLE);		} else {			dot.setVisibility(View.VISIBLE);		}		if (sortid == 0 && ageid != 0) {			t2.setText(MTApplication.ages[ageid]);		} else {			t2.setText(MTApplication.fenlei[sortid]);		}		reset();	}	// 最新 浮层	private void dismissPop(int i) {		switch (i) {		case 1:			if (popupWindow != null && popupWindow.isShowing()) {				popupWindow.dismiss();			}			break;		case 2:			if (popupWindow2 != null && popupWindow2.isShowing()) {				popupWindow2.dismiss();			}			popupWindow2 = null;			break;		}	}	SeasGridAdapter gridAdapter1;	SeasGridAdapter gridAdapter2;	SeasGridAdapter gridAdapter3;	private void showPop() {		if (popupWindow == null) {			final View v = LayoutInflater.from(getActivity()).inflate(					R.layout.show_shaixuan_layout, null);			popupWindow = new PopupWindow(v, LayoutParams.MATCH_PARENT,					LayoutParams.MATCH_PARENT, true);			i1 = (ImageView) v.findViewById(R.id.show_shaixuan_img1);			popupWindow.setAnimationStyle(R.style.popwin_anim_style);			popupWindow.setFocusable(true); // 设置不允许在外点击消失			popupWindow.setOutsideTouchable(true);			// 这个是为了点击“返回Back”也能使其消失，并且并不会影响你的背景			popupWindow.setBackgroundDrawable(new BitmapDrawable());			v.findViewById(R.id.show_shaixuan_clic_quyu).setOnClickListener(					this);			zuixin = (TextView) v					.findViewById(R.id.show_shaixuan_zuixinjingyan);			zuixin.setOnClickListener(this);			gonglue = (TextView) v.findViewById(R.id.show_shaixuan_gonglueji);			gonglue.setOnClickListener(this);			zuixin.setText("最新晒单");			gonglue.setText("精选");			v.findViewById(R.id.show_shaixuan_N).setOnClickListener(this);		}		if (popupWindow != null && !popupWindow.isShowing()) {			// 设置好参数之后再show			popupWindow.showAsDropDown(t2, 0, 5);		}	}	// 浮层window	private void showShaiXuanPop() {		if (popupWindow2 == null) {			final View v = LayoutInflater.from(getActivity()).inflate(					R.layout.seas_screen, null);			popupWindow2 = new PopupWindow(v, LayoutParams.MATCH_PARENT,					LayoutParams.MATCH_PARENT, true);			popupWindow2.setAnimationStyle(R.style.popwin_anim_style);			g1 = (MyGridView) v.findViewById(R.id.seas_screen_grid1);			g2 = (MyGridView) v.findViewById(R.id.seas_screen_grid2);			g3 = (MyGridView) v.findViewById(R.id.seas_screen_grid0);			g1.setFocusable(false);			g2.setFocusable(false);			g3.setFocusable(false);			gridAdapter1 = new SeasGridAdapter(getActivity(),					MTApplication.fenlei, 0, 3, sortid);			gridAdapter2 = new SeasGridAdapter(getActivity(),					MTApplication.ages, 1, 3, ageid);			gridAdapter3 = new SeasGridAdapter(getActivity(),					MTApplication.source, 2, 3, sourceid);			g1.setAdapter(gridAdapter1);			g2.setAdapter(gridAdapter2);			g3.setAdapter(gridAdapter3);			popupWindow2.setFocusable(true); // 设置不允许在外点击消失			popupWindow2.setOutsideTouchable(true);			// 这个是为了点击“返回Back”也能使其消失，并且并不会影响你的背景			popupWindow2.setBackgroundDrawable(new BitmapDrawable());			v.findViewById(R.id.seas_screen_N).setOnClickListener(this);			v.findViewById(R.id.seas_screen_Y).setOnClickListener(this);		}		if (popupWindow2 != null && !popupWindow2.isShowing()) {			// 设置好参数之后再show			popupWindow2.showAsDropDown(t2, 0, 5);		}	}	/**	 * 重置属性值	 * 	 * 20150420:ZhouYang	 * 	 * 2015-5-12下午5:47:39	 * 	 */	private void reset() {//		pagerCount = 0;		pageIndex = 0;		list.clear();		pageIndex = 1;		adapter.notifyDataSetChanged();	}	// 启动动画	private void animaostart() {		bg.setVisibility(View.GONE);		tip_doData.setVisibility(View.GONE);		if (aniDraw != null) {			aniDraw.start();			aini.setVisibility(View.VISIBLE);			listView.setVisibility(View.INVISIBLE);		}	}	// private int isMove = -1;	// 暂停动画	private void animstop() {		adapter.notifyDataSetChanged();		bg.setVisibility(View.GONE);		listView.onRefreshComplete();		listView.setVisibility(View.VISIBLE);		if (aniDraw != null) {			aniDraw.stop();			aini.setVisibility(View.GONE);		}		// if (isMove > 0) {		// listView.getRefreshableView().setSelection(isMove);		// isMove = -1;		// }	}	@Override	public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {		reset();		loadData();	}	@Override	public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {		listView.getRefreshableView().addFooterView(foot);		pageIndex += 1;		// footer.setVisibility(View.GONE);		loadData();	}	@Override	public void leftClick() {		Intent intent = new Intent(getActivity(), SearchActivity.class);		intent.putExtra("indext", 3);		startActivity(intent);		getActivity().overridePendingTransition(R.anim.slide_left_in,				R.anim.slide_left_out);	}	@Override	public void rightClick() {		if (!MTApplication.isLogin) {// 没有登录跳转首页			MTUtils.showLoginDialog(getActivity());		} else {			Intent in = new Intent(getActivity(), MyHouseActivity.class);			startActivity(in);			getActivity().overridePendingTransition(R.anim.slide_left_in,					R.anim.slide_left_out);		}	}	private boolean scrollFlag = false;// 标记是否滑动	private int lastVisibleItemPosition = 0;// 标记上次滑动位置	@Override	public void onScrollStateChanged(AbsListView view, int scrollState) {		switch (scrollState) {		// 当不滚动时		case OnScrollListener.SCROLL_STATE_IDLE:// 是当屏幕停止滚动时			scrollFlag = false;			// 判断滚动到底部			if (lv.getLastVisiblePosition() == (lv.getCount() - 1)) {				caidan.setVisibility(View.GONE);			}			// 判断滚动到顶部			if (lv.getFirstVisiblePosition() == 0) {				caidan.setVisibility(View.VISIBLE);			}			break;		case OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:// 滚动时			scrollFlag = true;			break;		case OnScrollListener.SCROLL_STATE_FLING:// 是当用户由于之前划动屏幕并抬起手指，屏幕产生惯性滑动时			scrollFlag = false;			break;		}	}	/**	 * firstVisibleItem：当前能看见的第一个列表项ID（从0开始） visibleItemCount：当前能看见的列表项个数（小半个也算）	 * totalItemCount：列表项共数	 */	@Override	public void onScroll(AbsListView view, int firstVisibleItem,			int visibleItemCount, int totalItemCount) {		// 当开始滑动且ListView底部的Y轴点超出屏幕最大范围时，显示或隐藏顶部按钮		if (scrollFlag				&& MTUtils.getScreenViewBottomHeight(lv) >= MTUtils						.getScreenHeight(getActivity())) {			if (firstVisibleItem > lastVisibleItemPosition) {// 上滑				caidan.setVisibility(View.GONE);			} else if (firstVisibleItem < lastVisibleItemPosition) {// 下滑				caidan.setVisibility(View.VISIBLE);			} else {				return;			}			lastVisibleItemPosition = firstVisibleItem;		}	}	@Override	public void onDismiss() {	}}