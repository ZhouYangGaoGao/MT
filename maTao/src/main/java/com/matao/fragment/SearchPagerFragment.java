/** *TODO * * */package com.matao.fragment;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;import java.util.ArrayList;import java.util.List;import android.graphics.drawable.AnimationDrawable;import android.os.Bundle;import android.text.Spannable;import android.text.SpannableStringBuilder;import android.text.style.ForegroundColorSpan;import android.view.LayoutInflater;import android.view.View;import android.widget.ImageView;import android.widget.ListView;import android.widget.TextView;import com.alibaba.fastjson.JSON;import com.lidroid.xutils.ViewUtils;import com.lidroid.xutils.view.annotation.ViewInject;import com.lidroid.xutils.view.annotation.event.OnClick;import com.matao.adapter.HomeTypeAdapter;import com.matao.bean.ArticleList;import com.matao.bean.Bean;import com.matao.bean.DaTePager;import com.matao.matao.R;import com.matao.pulltorefresh.library.PullToRefreshBase;import com.matao.pulltorefresh.library.PullToRefreshListView;import com.matao.pulltorefresh.library.PullToRefreshBase.Mode;import com.matao.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;import com.matao.utils.Logger;import com.matao.utils.MTApplication;import com.matao.utils.MTUtils;import com.matao.utils.SendActtionTool;import com.matao.utils.ServiceAction;import com.matao.utils.URLs;import com.matao.utils.UserAction;import com.umeng.analytics.MobclickAgent;/** * @author: ZhouYang * @time:2015-5-22 下午2:38:59 * @Description:搜索页面列表fragment */public class SearchPagerFragment extends BaseFragment implements		OnRefreshListener2<ListView> {	@ViewInject(R.id.search_listview)	PullToRefreshListView listView;	@ViewInject(R.id.favorable_tip)	TextView tip_doData;	@ViewInject(R.id.favorable_bg)	TextView bg;	@ViewInject(R.id.favorable_top)	ImageView top;	private View foot;	// private TextView footer;	@ViewInject(R.id.anim)	private TextView aini;	public static String keyWord;	private AnimationDrawable aniDraw;	// private int totalCount = 0;// 列表总条数	// private int pagerCount = 0;// 列表总页数	private String querytime = "2015-05-8";	private int pageIndex = 1;	private int type = 0;	private Bean bean;	private List<ArticleList> list = new ArrayList<ArticleList>();	private HomeTypeAdapter adapter;	private int priceType = -1;	public SearchPagerFragment() {		this(0, 0);	}	public void set(int TypeId, int Channel) {		this.type = TypeId;		this.priceType = Channel;	}	public SearchPagerFragment(int type, int priceType) {		this.type = type;		this.priceType = priceType;	}	int OwnerUserId = -1;	public SearchPagerFragment(int TypeId, int Channel, int OwnerUserId) {		this(TypeId, Channel);		this.OwnerUserId = OwnerUserId;	}	@OnClick({ R.id.favorable_bg, R.id.favorable_top })	public void onClick(View v) {		switch (v.getId()) {		case R.id.favorable_bg:			animaostart();			loadData();			break;		case R.id.favorable_top:			Logger.i("topClick", "返回顶部");			listView.getRefreshableView().setSelection(0);			break;		}	}	View heard;	TextView topText;	private void initListView() {		foot = View.inflate(getActivity(), R.layout.fragment_bottom, null);		// footer = (TextView) foot.findViewById(R.id.fragment_bottom_footer);		// footer.startAnimation(AnimationUtils.loadAnimation(getActivity(),		// R.anim.slide_bottom_to_top));		// listView.getRefreshableView().addFooterView(foot);		// listView.setOnScrollListener(new PauseOnScrollListener(		// MTApplication.bmu, false, true));		adapter = new HomeTypeAdapter(getActivity(), list);		heard = View.inflate(getActivity(), R.layout.search_tip, null);		topText = (TextView) heard.findViewById(R.id.item_search_tip);		if (priceType >= 0) {			topText.setVisibility(View.GONE);		}		listView.getRefreshableView().addHeaderView(heard);		listView.setAdapter(adapter);	}	@Override	public void onStart(ServiceAction service, Object action) {		super.onStart(service, action);	}	@Override	public void onException(ServiceAction service, Object action, Object value) {		super.onException(service, action, value);		animstop();		reset();		bg.setVisibility(View.VISIBLE);	}	@Override	public void onFaile(ServiceAction service, Object action, Object value) {		super.onFaile(service, action, value);		animstop();		reset();		bg.setVisibility(View.VISIBLE);	}	private boolean isCanLoad = true;	@Override	public void onFinish(ServiceAction service, Object action) {		super.onFinish(service, action);		listView.getRefreshableView().removeFooterView(foot);		isCanLoad = true;	}	@Override	public void onSuccess(ServiceAction service, Object action, Object value) {		super.onSuccess(service, action, value);		bean = JSON.parseObject(value.toString(), Bean.class);		if (bean != null) {			List<ArticleList> tlist = new ArrayList<ArticleList>();			tlist = bean.getData().getArticleList();			switch ((UserAction) action) {			case Action_Favorable_list:				Logger.i("Action_Favorable_list", value.toString());				if (tlist != null && tlist.size() != 0) {					list.addAll(tlist);				}				break;			case Action_Search:				String textTip = "";				if (tlist != null && tlist.size() != 0) {					list.addAll(tlist);					switch (type) {					case 0:						textTip = "搜索到含有" + keyWord + "相关的优惠";						break;					case 1:						textTip = "搜索到含有" + keyWord + "相关的海淘";						break;					case 2:						textTip = "搜索到含有" + keyWord + "相关的经验";						break;					case 3:						textTip = "搜索到含有" + keyWord + "相关的晒单";						break;					}				} else {					switch (type) {					case 0:						textTip = "亲，木有搜索到含有" + keyWord + "相关的优惠呢";						break;					case 1:						textTip = "亲，木有搜索到含有" + keyWord + "相关的海淘呢";						break;					case 2:						textTip = "亲，木有搜索到含有" + keyWord + "相关的经验呢";						break;					case 3:						textTip = "亲，木有搜索到含有" + keyWord + "相关的晒单呢";						break;					}				}				SpannableStringBuilder style = new SpannableStringBuilder(						textTip);				style.setSpan(new ForegroundColorSpan(0xff19b7f2),						textTip.indexOf(keyWord), textTip.indexOf(keyWord)								+ keyWord.length(),						Spannable.SPAN_EXCLUSIVE_INCLUSIVE);				topText.setText(style);				break;			}			if (list.size() != 0) {				tip_doData.setVisibility(View.GONE);			} else {				tip_doData.setVisibility(View.VISIBLE);			}			DaTePager dp = bean.getData().getDaTePager();			// if (pageIndex == 1) {// 当列表为第一页的时候初始化下列属性			// totalCount = dp.getTotalCount();			// pagerCount = dp.getPageCount();			// }			// else if (tlist != null && tlist.size() != 0) {			// isMove = list.size() - tlist.size() + 1;			// }			// if (pagerCount != 0 && pageIndex >= pagerCount) {			// footer.setVisibility(View.VISIBLE);			// } else {			// footer.setVisibility(View.GONE);			// }			querytime = dp.getQueryTime();		}		animstop();	}	// private int isMove = -1;	@Override	public View setContentView(LayoutInflater inflater) {		View view = inflater.inflate(R.layout.fragment_pager_listview, null);		return view;	}	@Override	public void initView(View v) {		ViewUtils.inject(this, v);		aniDraw = (AnimationDrawable) aini.getBackground();		listView.setOnRefreshListener(this);		listView.setMode(Mode.BOTH);		initListView();		list.clear();		adapter.notifyDataSetChanged();		// animaostart();		// loadData(); // 加载数据的方法	}	@Override	public void onActivityCreated(Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);		if (getUserVisibleHint()) {			reset();			animaostart();			loadData();		}	}	@Override	public void setUserVisibleHint(boolean isVisibleToUser) {		super.setUserVisibleHint(isVisibleToUser);		Logger.i("setUserVisibleHint--type", isVisibleToUser + "--" + type);		if (isVisibleToUser && isVisible()) {			reset();			animaostart();			loadData(); // 加载数据的方法		}	}	/**	 * 重置属性值	 * 	 * 20150420:ZhouYang	 * 	 * 2015-5-12下午5:47:39	 * 	 */	private void reset() {		// pagerCount = 0;		pageIndex = 0;		list.clear();		pageIndex = 1;		// adapter.notifyDataSetChanged();	}	// 启动动画	private void animaostart() {		bg.setVisibility(View.GONE);		tip_doData.setVisibility(View.GONE);		if (aniDraw != null) {			aniDraw.start();			aini.setVisibility(View.VISIBLE);			listView.setVisibility(View.INVISIBLE);		}	}	// 暂停动画	private void animstop() {		adapter.notifyDataSetChanged();		bg.setVisibility(View.GONE);		listView.onRefreshComplete();		listView.setVisibility(View.VISIBLE);		if (aniDraw != null) {			aniDraw.stop();			aini.setVisibility(View.INVISIBLE);		}		// if (isMove > 0) {		// listView.getRefreshableView().setSelection(isMove);		// isMove = -1;		// }	}	public void search() {		reset();		animaostart();		loadData();	}	/**	 * 加载优惠海淘列表	 * 	 * 作者:ZhouYang	 * 	 * 2015-6-10下午2:58:39	 * 	 */	private void loadData() {		if (MTUtils.isNetworkConnected(getActivity())) {			if (isCanLoad) {				isCanLoad = false;				if (priceType < 0) {					loadSearch();				} else {					loadList();				}			}		} else {			animstop();			reset();			tip_doData.setVisibility(View.GONE);			// footer.setVisibility(View.GONE);			listView.onRefreshComplete();			listView.setVisibility(View.INVISIBLE);			bg.setVisibility(View.VISIBLE);			MTUtils.netTip(getActivity());		}	}	private boolean isSetH = false;	public void loadList() {		String url = null;		try {			String time = URLEncoder.encode(querytime, "utf-8");			if (OwnerUserId == -1) {				url = MTUtils.getMTParams(URLs.YOUHUI_LIST, URLs.QUERY_TIME,						time, URLs.SORTID, FavorableFragment.sortid,						URLs.AGEID, FavorableFragment.ageid, "source",						FavorableFragment.sourceid, URLs.PRICE_TYPE, priceType,						URLs.PAGE_INDEX, pageIndex, URLs.USER_ID,						MTApplication.getInt(URLs.USER_ID));				Logger.i("优惠_url", url);			} else {				if (!isSetH && type == 1) {					heard.findViewById(R.id.item_search_tip0).setVisibility(							View.VISIBLE);					isSetH = true;				}				url = MTUtils.getMTParams(URLs.SENDORLIKE, URLs.QUERY_TIME,						time, "TypeId", type, "Channel", priceType,						URLs.PAGE_INDEX, pageIndex, "LoginUserId",						MTApplication.getInt(URLs.USER_ID), "OwnerUserId",						OwnerUserId);				Logger.i("经验晒单_url", url);			}		} catch (UnsupportedEncodingException e) {			e.printStackTrace();		}		SendActtionTool.get(url, ServiceAction.Action_Comment,				UserAction.Action_Favorable_list, this);	}	private void loadSearch() {		String url = null;		try {			// listView.getRefreshableView().removeHeaderView(heard);			String time = URLEncoder.encode(querytime, "utf-8");			String key = URLEncoder.encode(keyWord, "utf-8");			url = MTUtils.getMTParams(URLs.SEARCH, URLs.QUERY_TIME, time,					"Type", type, URLs.PAGE_INDEX, pageIndex, URLs.USER_ID,					MTApplication.getInt(URLs.USER_ID), "keyword", key);			Logger.i("search_url", url);		} catch (UnsupportedEncodingException e) {			e.printStackTrace();		}		SendActtionTool.get(url, ServiceAction.Action_User,				UserAction.Action_Search, this);	}	@Override	public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {		reset();		loadData();	}	@Override	public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {		listView.getRefreshableView().addFooterView(foot);		pageIndex += 1;		loadData();	}	public void onResume() {		super.onResume();		MobclickAgent.onPageStart("MainScreen"); // 统计页面	}	public void onPause() {		super.onPause();		MobclickAgent.onPageEnd("MainScreen");	}}