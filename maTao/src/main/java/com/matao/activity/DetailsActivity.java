package com.matao.activity;import java.util.ArrayList;import java.util.List;import org.json.JSONException;import android.annotation.SuppressLint;import android.app.Dialog;import android.content.ClipboardManager;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.drawable.AnimationDrawable;import android.os.Handler;import android.os.Message;import android.text.TextUtils;import android.view.Display;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.View.OnLongClickListener;import android.view.Window;import android.view.WindowManager;import android.webkit.JavascriptInterface;import android.webkit.WebView;import android.webkit.WebViewClient;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.alibaba.fastjson.JSON;import com.lidroid.xutils.ViewUtils;import com.lidroid.xutils.http.RequestParams;import com.lidroid.xutils.view.annotation.ContentView;import com.lidroid.xutils.view.annotation.ViewInject;import com.lidroid.xutils.view.annotation.event.OnClick;import com.matao.bean.Bean;import com.matao.bean.Data;import com.matao.matao.R;import com.matao.pulltorefresh.library.PullToRefreshBase;import com.matao.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;import com.matao.satellitemenu.SatelliteMenu;import com.matao.satellitemenu.SatelliteMenuItem;import com.matao.satellitemenu.SatelliteMenu.SateliteClickedListener;import com.matao.utils.Logger;import com.matao.utils.MD5Util;import com.matao.utils.MTApplication;import com.matao.utils.MTUtils;import com.matao.utils.SendActtionTool;import com.matao.utils.ServiceAction;import com.matao.utils.URLs;import com.matao.utils.UserAction;import com.matao.view.TopBar;import com.matao.view.TopBar.topBarClickListener;import com.umeng.socialize.bean.SHARE_MEDIA;import com.umeng.socialize.bean.SocializeEntity;import com.umeng.socialize.controller.UMServiceFactory;import com.umeng.socialize.controller.UMSocialService;import com.umeng.socialize.controller.listener.SocializeListeners.SnsPostListener;import com.umeng.socialize.media.QQShareContent;import com.umeng.socialize.media.QZoneShareContent;import com.umeng.socialize.media.UMImage;import com.umeng.socialize.sso.QZoneSsoHandler;import com.umeng.socialize.sso.SinaSsoHandler;import com.umeng.socialize.sso.UMQQSsoHandler;import com.umeng.socialize.sso.UMSsoHandler;import com.umeng.socialize.weixin.controller.UMWXHandler;import com.umeng.socialize.weixin.media.CircleShareContent;import com.umeng.socialize.weixin.media.WeiXinShareContent;/** * @author: ZhouYang * @time:2015-5-29 下午5:51:49 * @Description:详情界面 */@SuppressLint({ "JavascriptInterface", "SetJavaScriptEnabled" })@ContentView(R.layout.activity_details_yhht)public class DetailsActivity extends BaseActivity implements		OnRefreshListener2<WebView> {	@ViewInject(R.id.details_web)	private LinearLayout weblayout;	@ViewInject(R.id.details_topbar)	private TopBar topBar;	@ViewInject(R.id.anim)	private TextView aini;	private AnimationDrawable aniDraw;	@ViewInject(R.id.details_jianbujian)	private RelativeLayout jianLayout;	@ViewInject(R.id.details_bujian)	private TextView bujian;	@ViewInject(R.id.details_jian)	private TextView jian;	@ViewInject(R.id.details_like)	private TextView like;	@ViewInject(R.id.details_like_ico)	private ImageView like_ico;	@ViewInject(R.id.details_replay)	private TextView reply;	@ViewInject(R.id.details_like2_ico)	private ImageView like2_ico;	@ViewInject(R.id.details_replay_ico)	private ImageView replay_ico;	@ViewInject(R.id.details_gouwuche)	private ImageView gouwuche;	@ViewInject(R.id.details_layout2)	private LinearLayout layout2;	@ViewInject(R.id.details_layout)	private LinearLayout layout;	@ViewInject(R.id.details_like2)	private TextView like2;	@ViewInject(R.id.details_replay2)	private TextView replay2;	// @ViewInject(R.id.dialog_choose_collect)	// LinearLayout collect;// 选择-收集	@ViewInject(R.id.dialog_choose_share)	LinearLayout share;// 选择-分享	@ViewInject(R.id.dialog_choose_report)	LinearLayout report;// 选择-举报	@ViewInject(R.id.dialog_choose_N)	TextView cancel;// 选择-取消	private Dialog dialog;// 选择底部弹窗	private Dialog dialog2;// 分享底部弹窗	private Dialog dialog3;// 举报弹窗	public final int CHOOSE = 1001;	public final int SHARE = 1002;	private int likes = 0, replies = 0;	private String topTitle = "";	// private ArticleList art;	private String id;// 详情文章id	private boolean isJianShow = false;	private int productId = 77071;	private int isJian = 1;	private String goWu = "";	@Override	public void setContentView() {		ViewUtils.inject(this);		// setConfigCallback((WindowManager) getApplicationContext()		// .getSystemService(Context.WINDOW_SERVICE));		String url = null;		Intent i = getIntent();		url = i.getStringExtra("url");		murl = url;		menu();		loadInfo(url);		url = url + "-" + MTApplication.getInt("UserId");		aniDraw = (AnimationDrawable) aini.getBackground();		deClient client = new deClient();		// pullweb.setOnRefreshListener(this);		web = new WebView(getApplicationContext());		web.setLayoutParams(new LinearLayout.LayoutParams(-1, -1));		weblayout.addView(web);		web.setWebViewClient(client);		web.getSettings().setAllowFileAccess(true);		web.getSettings().setJavaScriptEnabled(true);		web.loadUrl(url + "/");		// web.getSettings().setBlockNetworkImage(true);		web.addJavascriptInterface(new JavaToJs(), "stub");		// web内容长按事件		web.setOnLongClickListener(new OnLongClickListener() {			@Override			public boolean onLongClick(View arg0) {				// 长按页面从底部弹出菜单				dialog = showDialog(dialog, CHOOSE,						R.layout.dialog_details_choose);				return false;			}		});		topBar.setOnTopBarClickListener(new topBarClickListener() {			@Override			public void rightClick() {				// 点击弹出分享弹窗				dialog2 = showDialog(dialog2, SHARE,						R.layout.dialog_detial_share);			}			@Override			public void leftClick() {				if (web.canGoBack()) {					loadInfo(backurl);					web.goBack();// 如果webview可以回退就回退网页				} else {					finish();				}			}		});	}	private void loadInfo(String url) {		if (url.contains(getString(R.string.youhui))) {			typeId = 2;			layout2.setVisibility(View.GONE);			layout.setVisibility(View.VISIBLE);			menu.setVisibility(View.VISIBLE);		} else {			typeId = 1;			layout2.setVisibility(View.VISIBLE);			layout.setVisibility(View.GONE);			menu.setVisibility(View.GONE);		}		id = url.substring(url.lastIndexOf("-") + 1, url.length() - 1);		productId = Integer.valueOf(id);		Logger.i("详情页url", ":" + url);		Logger.i("详情页id", ":" + id);		loadData();	}	SatelliteMenu menu;	private void menu() {		menu = (SatelliteMenu) findViewById(R.id.menu);		// Set from XML, possible to programmatically set		// float distance =		// TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 170,		// getResources().getDisplayMetrics());		// menu.setSatelliteDistance((int) distance);		// menu.setExpandDuration(500);		// menu.setCloseItemsOnClick(false);		// menu.setTotalSpacingDegree(60);		List<SatelliteMenuItem> items = new ArrayList<SatelliteMenuItem>();		items.add(new SatelliteMenuItem(1, R.drawable.pic_29));		items.add(new SatelliteMenuItem(2, R.drawable.pic_28));		menu.addItems(items);		menu.setOnItemClickedListener(new SateliteClickedListener() {			public void eventOccured(int id) {				Jian(id);			}		});	}	Handler handler = new Handler() {		@Override		public void handleMessage(Message msg) {			super.handleMessage(msg);			if (msg.arg1 <= 4) {				HomeActivity						.setRadioButtonId(msg.arg1, (int) msg.obj, msg.arg2);				startActivity(new Intent(DetailsActivity.this,						HomeActivity.class));			} else if (msg.arg1 == 10001) {				topBar.setTitle(topTitle);				if (topTitle.equals("优惠详情") || topTitle.equals("海淘详情")) {					layout2.setVisibility(View.GONE);					layout.setVisibility(View.VISIBLE);					reply.setText(replies + "");					like.setText(likes + "%");					menu.setVisibility(View.VISIBLE);				} else {					layout2.setVisibility(View.VISIBLE);					layout.setVisibility(View.GONE);					replay2.setText(replies + "");					like2.setText(likes + "");					menu.setVisibility(View.GONE);				}				setIco();			}		}	};	// 设置图标颜色	private void setIco() {		if (isJian == 1) {			like_ico.setImageResource(R.drawable.ico_recommend_2_red);			like2_ico.setImageResource(R.drawable.ico_love_2_red);		} else {			like_ico.setImageResource(R.drawable.ico_recommend_2);			like2_ico.setImageResource(R.drawable.ico_love_2);		}	}	@OnClick({ R.id.details_jian, R.id.details_bujian })	public void onClick(View v) {		Intent i = new Intent(this, ReplyActivity.class);		switch (v.getId()) {		case R.id.details_like_clic:			if (MTApplication.isLogin) {				if (isJian != 1) {					if (!isJianShow) {						jianLayout.setVisibility(View.VISIBLE);						isJianShow = true;					} else {						jianLayout.setVisibility(View.GONE);						isJianShow = false;					}				} else {					MTUtils.Toast(this, " 亲，您已经评过分了!");				}			} else {				MTUtils.showLoginDialog(this);			}			break;		case R.id.details_like_clic2:// love			if (MTApplication.isLogin) {				if (!isLike) {					isLike = true;					likes += 1;					like2_ico.setImageResource(R.drawable.ico_love_2_red);					// MTUtils.Toast(this, "喜欢成功!");				} else {					isLike = false;					likes -= 1;					like2_ico.setImageResource(R.drawable.ico_love_2);					MTUtils.Toast(this, "取消喜欢成功!");				}				like2.setText(likes + "");				Like();			} else {				MTUtils.showLoginDialog(this);			}			break;		case R.id.details_replay_clic2:			i.putExtra("type", type);			i.putExtra("ArticleId", productId);			startActivity(i);			break;		case R.id.details_replay_clic:			i.putExtra("type", type);			i.putExtra("ArticleId", productId);			startActivity(i);			break;		case R.id.details_jian:			Jian(1);			break;		case R.id.details_bujian:			Jian(2);			break;		case R.id.details_gouwuche:			Intent gw = new Intent(this, WebViewActivity.class);			gw.putExtra("url", goWu);			gw.putExtra("fang", false);			startActivity(gw);			overridePendingTransition(R.anim.slide_left_in,					R.anim.slide_left_out);			break;		}	}	// 荐 不荐	private void Jian(int recommendType) {		jianLayout.setVisibility(View.GONE);		String TimeStamp = MTUtils.getTimeStamp();		int userId = MTApplication.getInt("UserId");		String token = MTApplication.getString("Token");		org.json.JSONObject json = new org.json.JSONObject();		try {			json.put(					"Sign",					MD5Util.getLowerCaseMD5(userId + "" + productId + TimeStamp							+ URLs.KEY));			json.put(URLs.TIME_STAMP, TimeStamp);			json.put("UserId", userId);			json.put("UserToken", token);			json.put("RecommendType", recommendType);			json.put("ProductId", productId);			Logger.i("json-Jian", json.toString());		} catch (JSONException e) {			e.printStackTrace();		}		RequestParams p = new RequestParams();		p.addBodyParameter(URLs.JSON_INFO, json.toString());		SendActtionTool.post(URLs.JIAN, ServiceAction.Action_User,				UserAction.Action_Jian, this, p);	}	private int typeId = 4;	private boolean isLike = false;	// 喜不喜欢	private void Like() {		if (type == 2) {			typeId = 4;		} else {			typeId = 5;		}		String TimeStamp = MTUtils.getTimeStamp();		int userId = MTApplication.getInt("UserId");		String token = MTApplication.getString("Token");		org.json.JSONObject json = new org.json.JSONObject();		try {			json.put(					"Sign",					MD5Util.getLowerCaseMD5(userId + "" + productId + TimeStamp							+ URLs.KEY));			json.put(URLs.TIME_STAMP, TimeStamp);			json.put("UserId", userId);			json.put("UserToken", token);			json.put("TypeId", typeId);			json.put("IsLike", isLike);			json.put("Articleid", productId);			Logger.i("json-Like", json.toString());		} catch (JSONException e) {			e.printStackTrace();		}		RequestParams p = new RequestParams();		p.addBodyParameter(URLs.JSON_INFO, json.toString());		SendActtionTool.post(URLs.LIKE, ServiceAction.Action_User,				UserAction.Action_Like, this, p);	}	// 加载信息数据	private void loadData() {		String loadurl = MTUtils.getMTParams(URLs.DETAIL, "Id", id, "TypeId",				typeId, "UserId", MTApplication.getInt("UserId"), "k",				System.currentTimeMillis());		Logger.i("Action_DETAIL-url", loadurl);		// 发送get请求		SendActtionTool.get(loadurl, ServiceAction.Action_Comment,				UserAction.Action_DETAIL, this);	}	private void report() {		// 举报		String TimeStamp = MTUtils.getTimeStamp();		int userId = MTApplication.getInt("UserId");		int ReferUserId = 0;		String token = MTApplication.getString("Token");		org.json.JSONObject json = new org.json.JSONObject();		try {			json.put(					"Sign",					MD5Util.getLowerCaseMD5(userId + "" + ReferUserId							+ TimeStamp + URLs.KEY));			json.put(URLs.TIME_STAMP, TimeStamp);			json.put(URLs.USER_ID, userId);			json.put("ReportObject", 1);			json.put("ReferUserId", 0);			json.put("Content", "");			json.put("ContentId", productId);			json.put("TypeId", type);			json.put("UserToken", token);		} catch (JSONException e) {			e.printStackTrace();		}		RequestParams p = new RequestParams();		p.addBodyParameter(URLs.JSON_INFO, json.toString());		SendActtionTool.post(URLs.REPORT, ServiceAction.Action_User,				UserAction.Action_Report, this, p);	}	@Override	public void onSuccess(ServiceAction service, Object action, Object value) {		super.onSuccess(service, action, value);		Bean bean = JSON.parseObject(value.toString(), Bean.class);// 获得数据实体		Data data = bean.getData();		switch ((UserAction) action) {		case Action_DETAIL:			if (data != null) {				titleS = data.getTitle();				content = data.getSummary();				isLike = data.isIsLike();				goWu = data.getUrl();				likes = data.getLikes();				replies = data.getReplys();				topTitle = data.getChannel();				topBar.setTitle(topTitle);				BigPicActivity.imgs = data.getImgList();				Logger.i("imgs", data.getImgList());				switch (topTitle) {				case "优惠详情":					reply.setText(replies + "");					like.setText(data.getRecommends() + "%");					type = 1;					break;				case "海淘详情":					type = 1;					reply.setText(replies + "");					like.setText(data.getRecommends() + "%");					break;				case "经验详情":					type = 2;					replay2.setText(replies + "");					like2.setText(likes + "");					break;				case "晒单详情":					type = 3;					replay2.setText(replies + "");					like2.setText(likes + "");					break;				}				if (data.isIsRecommend()) {					like_ico.setImageResource(R.drawable.ico_recommend_2_red);					isJian = 1;					SatelliteMenu.isShow = false;				} else {					isJian = 0;					like_ico.setImageResource(R.drawable.ico_recommend_2);					SatelliteMenu.isShow = true;				}				if (data.isIsLike()) {					like2_ico.setImageResource(R.drawable.ico_love_2_red);				} else {					like2_ico.setImageResource(R.drawable.ico_love_2);				}			}			break;		case Action_FXCG:			if (bean.getData().getPoint() > 0) {				MTUtils.JiFenToast(this, bean.getMsg());			}			break;		case Action_Report:			if (data.isOperateResult() == true) {				MTUtils.Toast(DetailsActivity.this, "举报成功");			} else {				MTUtils.Toast(this, bean.getMsg());			}			Logger.i("Action_Report", bean.toString());			break;		case Action_Jian:			Logger.i("推荐", bean.toString());			SatelliteMenu.isShow = false;			// isJian = 1;			// isJianShow = false;			like_ico.setImageResource(R.drawable.ico_recommend_2_red);			like.setText(data.getRecommend() + "%");			MTUtils.Toast(this, "评分成功!");			Logger.i("Action_Jian", bean.toString());			break;		case Action_Like:			if (bean.getData().getPoint() > 0 && isLike) {				MTUtils.JiFenToast(this, bean.getMsg());			} else {				MTUtils.Toast(this, "喜欢成功！");			}			break;		}	}	@Override	public void onFaile(ServiceAction service, Object action, Object value) {		super.onFaile(service, action, value);		Bean bean = JSON.parseObject(value.toString(), Bean.class);// 获得数据实体		Data data = bean.getData();		switch ((UserAction) action) {		// 普通登陆		case Action_Report:			Logger.i("Action_Report", bean.toString());			String str = bean.getMsg();			MTUtils.Toast(this, str);			break;		case Action_Jian:			MTUtils.Toast(this, "评分失败!");			Logger.i("Action_Jian", bean.toString());			break;		case Action_Like:			Logger.i("Action_Like", bean.toString());			break;		}	}	@Override	public void onException(ServiceAction service, Object action, Object value) {		super.onException(service, action, value);		switch ((UserAction) action) {		// 普通登陆		case Action_Report:			Logger.i("Action_Report", "");			break;		case Action_Jian:			Logger.i("Action_Jian", "");			break;		case Action_Like:			Logger.i("Action_Like", "");			break;		}	}	private class deClient extends WebViewClient {		@Override		public boolean shouldOverrideUrlLoading(WebView view, String url) {			if (url.contains(getString(R.string.youhui))					|| url.contains(getString(R.string.detail))) {				loadInfo(url);				backurl = murl;				view.loadUrl(url + "-" + MTApplication.getInt("UserId") + "/");				murl = url;			}			return true;		}		@Override		public void onPageStarted(WebView view, String url, Bitmap favicon) {			super.onPageStarted(view, url, favicon);			Logger.i("onPageStarted", url);			// animaostart();		}		@Override		public void onPageFinished(WebView view, String url) {			super.onPageFinished(view, url);			animstop();			// view.loadUrl("javascript:getImgListMethod()");		}		@Override		public void onReceivedError(WebView view, int errorCode,				String description, String failingUrl) {			super.onReceivedError(view, errorCode, description, failingUrl);		}	}	private WebView web;	private String murl = null;	private String backurl = null;	@Override	public void finish() {		super.finish();		web.clearCache(true);		overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);	}	@Override	public void onBackPressed() {		if (web.canGoBack()) {			web.goBack();// 如果webview可以回退就回退网页		} else {			super.onBackPressed();			finish();		}	}	@Override	public void findViewById() {		animaostart();		ssoOK();	}	private int type = 0;	private String titleS = "";// 分享标题	private String content = "";// 分享内容	public class JavaToJs {		/**		 * 获得浏览器跳转信息 作者:ZhouYang 2015-5-30上午10:09:29		 */		@JavascriptInterface		public void jsJumpMethod(String s1, String s2, String s3) {			if (s2 == null && s1.length() >= 4					&& s1.substring(0, 4).equals("http")) {				Intent i = new Intent(DetailsActivity.this,						WebViewActivity.class);				i.putExtra("url", s1);				i.putExtra("fang", false);				startActivity(i);			} else {				Logger.i("name", s2);				switch (s2) {				case "UserHome":// ※ 他的小窝 暂时不做					if (Integer.valueOf(s3) == MTApplication.getInt("UserId")) {						Intent ih = new Intent(DetailsActivity.this,								MyHouseActivity.class);						ih.putExtra("OwnerUserId", Integer.valueOf(s3));						startActivity(ih);					} else {						Intent ih = new Intent(DetailsActivity.this,								TaHouseActivity.class);						ih.putExtra("OwnerUserId", Integer.valueOf(s3));						startActivity(ih);					}					// Logger.i("UserHome_OwnerUserId", s3);					break;				case "Youhui":					// FavorableFragment.sourceid = 1;					LinkTo(1, Integer.valueOf(s3), 0);					break;				case "Haitao":					// FavorableFragment.sourceid = 2;					LinkTo(1, Integer.valueOf(s3), 0);					break;				case "Jingyan":					LinkTo(2, Integer.valueOf(s3), 0);					break;				case "Shaidan":					LinkTo(3, Integer.valueOf(s3), 0);					break;				case "Tag":					Intent i = new Intent(DetailsActivity.this,							TagActivity.class);					i.putExtra("tagid", s3);					startActivity(i);					break;				case "SuperLowPrice":// 进入优惠超级低价列表					// FavorableFragment.sourceid = 1;					LinkTo(1, 0, 3);					break;				case "Nine":// 进入优惠折扣列表					// FavorableFragment.sourceid = 1;					// HomeActivity.setRadioButtonId(1, 2, 0);					LinkTo(1, 0, 2);					break;				case "Discount":// 进入优惠折扣列表					// FavorableFragment.sourceid = 1;					LinkTo(1, 0, 1);					break;				}			}		}		private void LinkTo(final int i, final int sortId, final int tabid) {			final Message msg = new Message();			new Thread() {				public void run() {					msg.arg1 = i;					msg.arg2 = sortId;					msg.obj = tabid;					handler.sendMessage(msg);				};			}.start();		}		/**		 * 获得浏览器当前图片 作者:ZhouYang 2015-5-30上午10:15:45		 */		@JavascriptInterface		public void jsImgShowMethod(String img) {			BigPicActivity.currImg = img;			Logger.i("jsImgShowMethod", img.toString());			startActivity(new Intent(getApplicationContext(),					BigPicActivity.class));		}		/**		 * 获得浏览器图片列表 作者:ZhouYang 2015-5-30上午11:08:20		 */		@JavascriptInterface		public void jsImgListMethod(int articleId, String imglist, int like,				int replay, String title, int isLikeOrRecommend,				String produtUrl, String s4, String s5) {			Logger.i("jsJumpMethod", "s4:" + s4 + "  s5:" + s5);			titleS = s4;			content = s5;			Logger.i("articleId", articleId + "");			Logger.i("jsImgListMethod  =>>", imglist + "-like=" + like					+ "-replay=" + replay + "-title=" + title + "-articleId="					+ articleId + "-isLikeOrRecommend=" + isLikeOrRecommend					+ "-produtUrl=" + produtUrl);			productId = articleId;			isJian = isLikeOrRecommend;			if (isJian == 1) {				isLike = true;				SatelliteMenu.isShow = false;			} else {				isLike = false;				SatelliteMenu.isShow = true;			}			goWu = produtUrl;			likes = like;			replies = replay;			topTitle = title;			LinkTo(10001, 0, 0);			if (!TextUtils.isEmpty(imglist)) {				BigPicActivity.imgs = JSON.parseArray(imglist, String.class);			}			switch (title) {			case "优惠详情":				type = 1;				break;			case "海淘详情":				type = 1;				break;			case "经验详情":				type = 2;				break;			case "晒单详情":				type = 3;				break;			}		}	}	// （1）setAllowFileAccess(boolean allow); 　　　　　　//设置启用或禁止访问文件数据	// （2）setBuiltInZoomControls(boolean enabled); 　　//设置是否支持缩放	// （3）setDefaultFontSize(int size); 　　　　　　　　 //设置默认的字体大小	// （4）setJavaScriptEnabled(boolean flag); 　　　　　 //设置是否支持JavaScript	// （5）setSupportZoom(boolean support); 　　　　　　//设置是否支持变焦	public class ViewWait {		// private Context mContext;		public ViewWait(Context mContext) {			super();			// this.mContext = mContext;		}		@OnClick({ R.id.dialog_choose_share, R.id.dialog_choose_report,				R.id.dialog_choose_N, R.id.share_copy, R.id.share_report,				R.id.share_N, R.id.share_QQ, R.id.share_QZone, R.id.share_wx,				R.id.share_wxcircle, R.id.share_xl, R.id.dialog_N,				R.id.dialog_Y })		public void onClick(View v) {			switch (v.getId()) {			// case R.id.dialog_choose_collect:			// MTUtils.Toast(mContext, "收集");			// dialog.dismiss();			// break;			case R.id.dialog_choose_share:				// 点击弹出分享弹窗				dialog2 = showDialog(dialog2, SHARE,						R.layout.dialog_detial_share);				dialog.dismiss();				break;			case R.id.dialog_choose_report:				report();				dialog.dismiss();				break;			case R.id.dialog_choose_N:				dialog.dismiss();				break;			case R.id.share_wxcircle:				share(SHARE_MEDIA.WEIXIN_CIRCLE);				dialog2.dismiss();				break;			case R.id.share_wx:				share(SHARE_MEDIA.WEIXIN);				dialog2.dismiss();				break;			case R.id.share_QQ:				share(SHARE_MEDIA.QQ);				dialog2.dismiss();				break;			case R.id.share_QZone:				share(SHARE_MEDIA.QZONE);				dialog2.dismiss();				break;			case R.id.share_xl:				share(SHARE_MEDIA.SINA);				dialog2.dismiss();				break;			case R.id.share_copy:				// 获取剪切板服务				ClipboardManager clipboardManager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);				clipboardManager.setText(murl.replace("app.matao.com",						"m.matao.com").replace("/app/", "/"));				MTUtils.Toast(DetailsActivity.this, "复制成功");				dialog2.dismiss();				break;			// case R.id.share_collect:			// MTUtils.Toast(DetailsActivity.this, "收集");			// dialog2.dismiss();			// break;			case R.id.share_report:				dialog3 = MTUtils.showDialog(DetailsActivity.this,						new OnClickListener() {							public void onClick(View v) {								switch (v.getId()) {								case R.id.dialog_N:									dialog2.dismiss();									dialog3.dismiss();									break;								case R.id.dialog_Y:									dialog2.dismiss();									dialog3.dismiss();									report();									break;								}							}						}, "取消", "确定", "确定要举报该内容吗？");				break;			case R.id.share_N:				dialog2.dismiss();				break;			}		}	}	private void animaostart() {		if (aniDraw != null) {			aniDraw.start();			aini.setVisibility(View.VISIBLE);			web.setVisibility(View.INVISIBLE);		}	}	private void animstop() {		if (aniDraw != null) {			aniDraw.stop();			aini.setVisibility(View.INVISIBLE);			web.setVisibility(View.VISIBLE);		}	}	// --------------------第三方分享-----------------------------------------------------------------	final UMSocialService mController = UMServiceFactory			.getUMSocialService("com.umeng.share");	private void share(SHARE_MEDIA platformType) {		mController.getConfig().closeToast();		// 设置分享内容		mController.setShareContent(content);		// 设置分享图片，参数2为本地图片的资源引用		mController.setShareMedia(new UMImage(DetailsActivity.this,				R.drawable.ic_launcher_1));		// 设置QQ好友分享内容		QQShareContent qqShareContent = new QQShareContent();		// 设置分享文字		qqShareContent.setShareContent(content);		// 设置分享title		qqShareContent.setTitle(titleS);		// 设置分享图片		qqShareContent.setShareImage(new UMImage(DetailsActivity.this,				R.drawable.ic_launcher_1));		// 设置点击分享内容的跳转链接		qqShareContent.setTargetUrl(murl.replace("/app/", "/"));		mController.setShareMedia(qqShareContent);		// 设置QQ空间分享内容		QZoneShareContent qzone = new QZoneShareContent();		// 设置分享文字		qzone.setShareContent(content);		// 设置点击消息的跳转URL		qzone.setTargetUrl(murl.replace("/app/", "/"));		// 设置分享内容的标题		qzone.setTitle(titleS);		// 设置分享图片		qzone.setShareImage(new UMImage(DetailsActivity.this,				R.drawable.ic_launcher_1));		mController.setShareMedia(qzone);		// 设置微信好友分享内容		WeiXinShareContent weixinContent = new WeiXinShareContent();		// 设置分享文字		weixinContent.setShareContent(content);		// 设置title		weixinContent.setTitle(titleS);		// 设置分享内容跳转URL		weixinContent.setTargetUrl(murl.replace("/app/", "/"));		// 设置分享图片		weixinContent.setShareImage(new UMImage(DetailsActivity.this,				R.drawable.ic_launcher_1));		mController.setShareMedia(weixinContent);		// 设置微信朋友圈分享内容		CircleShareContent circleMedia = new CircleShareContent();		circleMedia.setShareContent(content);		// 设置朋友圈title		circleMedia.setTitle(titleS);		circleMedia.setShareImage(new UMImage(DetailsActivity.this,				R.drawable.ic_launcher_1));		circleMedia.setTargetUrl(murl.replace("/app/", "/"));		mController.setShareMedia(circleMedia);		// 参数1为Context类型对象， 参数2为要分享到的目标平台， 参数3为分享操作的回调接口		mController.postShare(DetailsActivity.this, platformType,				new SnsPostListener() {					@Override					public void onStart() {						// MTUtils.Toast(DetailsActivity.this, "开始分享");					}					@Override					public void onComplete(SHARE_MEDIA platform, int eCode,							SocializeEntity entity) {						if (eCode == 200) {							// MTUtils.Toast(DetailsActivity.this, "分享成功");							switch (platform) {							case WEIXIN_CIRCLE:								fenXiangCG(0);								break;							case WEIXIN:								fenXiangCG(1);								break;							case QQ:								fenXiangCG(3);								break;							case QZONE:								fenXiangCG(2);								break;							case SINA:								fenXiangCG(4);								break;															}						} else {							String eMsg = "";							if (eCode == -101) {								eMsg = "没有授权";							}else if (eCode == -10) {								MTUtils.Toast(DetailsActivity.this, "分享失败");							}						}					}				});	}	private void fenXiangCG(int MediaId) {		String TimeStamp = MTUtils.getTimeStamp();		int userId = MTApplication.getInt("UserId");		String token = MTApplication.getString("Token");		org.json.JSONObject json = new org.json.JSONObject();		try {			json.put(					"Sign",					MD5Util.getLowerCaseMD5(MediaId + "" + userId + token							+ TimeStamp + URLs.KEY));			json.put(URLs.TIME_STAMP, TimeStamp);			json.put("UserId", userId);			json.put("UserToken", token);			json.put("TypeId", typeId);			json.put("MediaId", MediaId);			json.put("ContentId", productId);			Logger.i("json-Like", json.toString());		} catch (JSONException e) {			e.printStackTrace();		}		RequestParams p = new RequestParams();		p.addBodyParameter(URLs.JSON_INFO, json.toString());		SendActtionTool.post(URLs.FXCG, ServiceAction.Action_User,				UserAction.Action_FXCG, this, p);	}	private void ssoOK() {		// ---------------各平台SSO（免登录）配置-----------------------------------------------------------		// 添加微信平台		UMWXHandler wxHandler = new UMWXHandler(DetailsActivity.this,				URLs.WXAppID, URLs.WXAppSecret);		wxHandler.addToSocialSDK();		// 添加微信朋友圈		UMWXHandler wxCircleHandler = new UMWXHandler(DetailsActivity.this,				URLs.WXAppID, URLs.WXAppSecret);		wxCircleHandler.setToCircle(true);		wxCircleHandler.addToSocialSDK();		// 添加QQ		UMQQSsoHandler qqSsoHandler = new UMQQSsoHandler(DetailsActivity.this,				URLs.QQAppID, URLs.QQAppSecret);		qqSsoHandler.addToSocialSDK();		// 添加QQ空间		QZoneSsoHandler qZoneSsoHandler = new QZoneSsoHandler(				DetailsActivity.this, URLs.QQAppID, URLs.QQAppSecret);		qZoneSsoHandler.addToSocialSDK();		// 设置新浪SSO handler		mController.getConfig().setSsoHandler(new SinaSsoHandler());		mController.getConfig().setSinaCallbackUrl("http://www.matao.com/");	}	// SSO登录回调	@Override	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		super.onActivityResult(requestCode, resultCode, data);		mController.getConfig().setSinaCallbackUrl("http://www.matao.com");		/** 使用SSO授权必须添加如下代码 */		UMSsoHandler ssoHandler = mController.getConfig().getSsoHandler(				requestCode);		if (ssoHandler != null) {			ssoHandler.authorizeCallBack(requestCode, resultCode, data);		}	}	@Override	public void onPullDownToRefresh(PullToRefreshBase<WebView> refreshView) {		web.reload();	}	@Override	public void onPullUpToRefresh(PullToRefreshBase<WebView> refreshView) {	}	/**	 * 屏幕底部弹窗	 * 	 * @param dialog	 *            要显示的弹窗对象	 * @param layoutId	 *            布局Id	 */	public Dialog showDialog(Dialog dialog, int dialogCode, int layoutId) {		dialog = new Dialog(this, R.style.MmsDialogTheme);		dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);		// View v = View.inflate(this, layoutId, null);		View v = LayoutInflater.from(getApplicationContext()).inflate(layoutId,				null);		ViewWait w = new ViewWait(getApplicationContext());		ViewUtils.inject(w, v);		dialog.setContentView(v);		WindowManager.LayoutParams lp = dialog.getWindow().getAttributes();		Display dsp = getWindowManager().getDefaultDisplay();		lp.width = (int) dsp.getWidth();		lp.y = (int) dsp.getHeight();		dialog.getWindow().setAttributes(lp);		dialog.show();		return dialog;	}	// public void setConfigCallback(WindowManager windowManager) {	// try {	// Field field = WebView.class.getDeclaredField("mWebViewCore");	// field = field.getType().getDeclaredField("mBrowserFrame");	// field = field.getType().getDeclaredField("sConfigCallback");	// field.setAccessible(true);	// Object configCallback = field.get(null);	//	// if (null == configCallback) {	// return;	// }	//	// field = field.getType().getDeclaredField("mWindowManager");	// field.setAccessible(true);	// field.set(configCallback, windowManager);	// } catch (Exception e) {	// }	// }	protected void onDestroy() {		super.onDestroy();		if (web != null) {			try {				web.clearCache(true);				web.removeAllViews();				web.setVisibility(View.GONE);				// web.destroy();			} catch (Exception e) {				e.printStackTrace();			}		}		// setConfigCallback(null);	}}