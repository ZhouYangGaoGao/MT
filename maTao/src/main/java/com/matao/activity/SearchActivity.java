package com.matao.activity;import java.util.ArrayList;import java.util.List;import android.annotation.SuppressLint;import android.os.Handler;import android.support.v4.app.Fragment;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.view.KeyEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.View.OnFocusChangeListener;import android.view.inputmethod.EditorInfo;import android.widget.AbsListView;import android.widget.AbsListView.OnScrollListener;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListView;import android.widget.TextView;import com.lidroid.xutils.ViewUtils;import com.lidroid.xutils.view.annotation.ViewInject;import com.matao.adapter.FPAdapter;import com.matao.fragment.SearchPagerFragment;import com.matao.matao.R;import com.matao.utils.Logger;import com.matao.utils.MTApplication;import com.matao.utils.MTUtils;import com.matao.view.TopBar;import com.matao.view.TopBar.topBarClickListener;import com.umeng.analytics.MobclickAgent;/** * @author: ZhouYang * @time:2015-5-20 下午3:53:29 * @Description:搜索页面 */@SuppressLint("NewApi")public class SearchActivity extends BaseActivity implements TextWatcher,		OnPageChangeListener, topBarClickListener, OnScrollListener,		OnFocusChangeListener {	private TextView t1, t2, t3, t4;	private ImageView i1, i2, i3, i4, clear;	private List<ImageView> is = new ArrayList<ImageView>();	private List<TextView> ts = new ArrayList<TextView>();	private TopBar topBar;	private ViewPager pager;	private FPAdapter myPagerAdapter;	private EditText editText;	// private boolean[] isClickeds = { false, false, false, false };	public static int type = 0;	private String keyWord;	List<Fragment> fragemList = new ArrayList<Fragment>();	@ViewInject(R.id.search_LishiJilu)	private ListView jiLu;	@Override	public void onClick(View v) {		switch (v.getId()) {		case R.id.favorable_page4:			tabClick(3);			pager.setCurrentItem(3);			break;		case R.id.favorable_page3:			tabClick(2);			pager.setCurrentItem(2);			break;		case R.id.favorable_page2:			tabClick(1);			pager.setCurrentItem(1);			break;		case R.id.favorable_page1:			tabClick(0);			pager.setCurrentItem(0);			break;		case R.id.search_clear:			save();			editText.setText("");			pager.setVisibility(View.GONE);			jiLu.setVisibility(View.VISIBLE);			initJilu();			MTUtils.KeyBoardShow(this, editText);			break;		}	}	private void tabClick(int i) {		// search();		// if (isClickeds[i]) {		// isClickeds[i] = false;		// } else {		// isClickeds[i] = true;		// }	}	private void save() {		if (jilustrs.size() > 10) {			jilustrs.remove(10);		}		MTApplication.mEditor.putInt("size", jilustrs.size());		for (int i = 0; i < jilustrs.size(); i++) {			MTApplication.mEditor.putString("" + i, jilustrs.get(i));		}		MTApplication.mEditor.commit();	}	/**	 * 切换tab	 * 	 * ZhouYang	 * 	 * 2015-5-14上午11:52:48	 * 	 */	private void tabChecked(int i) {		type = i;		TextView t;		ImageView im;		for (int j = 0; j < 4; j++) {			t = ts.get(j);			im = is.get(j);			im.setImageBitmap(null);			t.setTextColor(0xff999999);		}		ts.get(i).setTextColor(0xffff74bf);		is.get(i).setImageResource(R.drawable.line_2_selected);	}	// 初始化控件	private void init() {		ViewUtils.inject(this);		final View view = ViewPager.inflate(this, R.layout.clear_jilu, null);		view.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View arg0) {				jilustrs.clear();				adapter.notifyDataSetChanged();				jiLu.removeFooterView(view);				MTUtils.Toast(SearchActivity.this, "清除成功");			}		});		jiLu.addFooterView(view);		jiLu.setOnScrollListener(this);		initJilu();		pager = (ViewPager) findViewById(R.id.search_viewPager);		pager.setOffscreenPageLimit(0);		pager.setOnPageChangeListener(this);		editText = (EditText) findViewById(R.id.search_editText);		editText.addTextChangedListener(this);		clear = (ImageView) findViewById(R.id.search_clear);		clear.setOnClickListener(this);		topBar = (TopBar) findViewById(R.id.search_topbar);		topBar.setOnTopBarClickListener(this);		t1 = (TextView) findViewById(R.id.favorable_page1);		t2 = (TextView) findViewById(R.id.favorable_page2);		t3 = (TextView) findViewById(R.id.favorable_page3);		t4 = (TextView) findViewById(R.id.favorable_page4);		i1 = (ImageView) findViewById(R.id.favorable_page1_icon);		i2 = (ImageView) findViewById(R.id.favorable_page2_icon);		i3 = (ImageView) findViewById(R.id.favorable_page3_icon);		i4 = (ImageView) findViewById(R.id.favorable_page4_icon);		t1.setOnClickListener(this);		t2.setOnClickListener(this);		t3.setOnClickListener(this);		t4.setOnClickListener(this);		is.add(i1);		is.add(i2);		is.add(i3);		is.add(i4);		ts.add(t1);		ts.add(t2);		ts.add(t3);		ts.add(t4);		myPagerAdapter = new FPAdapter(getSupportFragmentManager(), fragemList);		pager.setAdapter(myPagerAdapter);		pager.setOffscreenPageLimit(1);		editText.setOnEditorActionListener(new TextView.OnEditorActionListener() {			public boolean onEditorAction(TextView v, int actionId,					KeyEvent event) {				if (actionId == EditorInfo.IME_ACTION_SEARCH						|| (event != null && event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) {					search();					return true;				}				return false;			}		});		editText.setOnFocusChangeListener(this);		editText.setFocusable(true);		editText.setFocusableInTouchMode(true);		editText.requestFocus();		onFocusChange(editText, editText.isFocused());	}	ArrayAdapter<String> adapter;	List<String> jilustrs = new ArrayList<String>();	private boolean isJiLuInit = false;	private void initJilu() {		jilustrs.clear();		for (int i = 0; i < MTApplication.getInt("size"); i++) {			jilustrs.add(MTApplication.getString("" + i));		}		adapter = new ArrayAdapter<String>(this, R.layout.item_jilu,				R.id.item_jilu_text, jilustrs);		jiLu.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,					long arg3) {				editText.setText(jilustrs.get(arg2));				jiLu.setVisibility(View.GONE);				search();			}		});		if (jilustrs.size() > 0) {			jiLu.setAdapter(adapter);			adapter.notifyDataSetChanged();		}	}	@Override	public void leftClick() {		finish();	}	@Override	public void rightClick() {		search();	}	@Override	public void finish() {		super.finish();		MTUtils.KeyBoardCancle(this);		overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);	}	@Override	public void onBackPressed() {		super.onBackPressed();		finish();	}	private void search() {		keyWord = editText.getText().toString().trim();		if (!TextUtils.isEmpty(keyWord)) {			jiLu.setVisibility(View.GONE);			pager.setVisibility(View.VISIBLE);			MTUtils.KeyBoardCancle(this);			SearchPagerFragment.keyWord = keyWord;			for (int i = 0; i < jilustrs.size(); i++) {				if (jilustrs.get(i).equals(keyWord)) {					jilustrs.remove(i);				}			}			jilustrs.add(0, keyWord);			if (!isJiLuInit) {				for (int i = 0; i < 4; i++) {					fragemList.add(new SearchPagerFragment(i, -1));				}				isJiLuInit = true;			} else {				SearchPagerFragment fragment = (SearchPagerFragment) fragemList						.get(type);				fragment.search();			}			adapter.notifyDataSetChanged();			myPagerAdapter.notifyDataSetChanged();			pager.setCurrentItem(type);		} else {			MTUtils.Toast(this, "请输入搜索内容");		}	}	@Override	protected void onStop() {		super.onStop();		save();		Logger.i("search", "onStop");	}	@Override	public void setContentView() {		type = getIntent().getIntExtra("indext", 0);		setContentView(R.layout.activity_search);	}	@Override	public void findViewById() {		init();	}	@Override	public void onPageScrollStateChanged(int arg0) {	}	@Override	public void onPageScrolled(int arg0, float arg1, int arg2) {	}	@Override	public void onPageSelected(int arg0) {		tabChecked(arg0);	}	@Override	public void afterTextChanged(Editable s) {	}	@Override	public void beforeTextChanged(CharSequence s, int start, int count,			int after) {	}	@Override	public void onTextChanged(CharSequence s, int start, int before, int count) {		if (!TextUtils.isEmpty(s)) {			clear.setVisibility(View.VISIBLE);		} else {			clear.setVisibility(View.GONE);		}	}	public void onResume() {		super.onResume();		MobclickAgent.onResume(this); // 统计时长	}	public void onPause() {		super.onPause();		MobclickAgent.onPause(this);	}	@Override	public void onScroll(AbsListView arg0, int arg1, int arg2, int arg3) {	}	@Override	public void onScrollStateChanged(AbsListView arg0, int arg1) {		MTUtils.KeyBoardCancle(this);	}	@Override	public void onFocusChange(View arg0, final boolean arg1) {		new Handler().postDelayed(new Runnable() {			@Override			public void run() {				if (arg1) {					MTUtils.KeyBoardShow(SearchActivity.this, editText);				}			}		}, 100);	}}